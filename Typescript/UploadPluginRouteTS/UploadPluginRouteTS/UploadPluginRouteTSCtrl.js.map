{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/UploadPluginRouteTSCtrl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s"],"mappings":"aACE,IAAIA,EAAmB,CAAC,EAGxB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,CAAC,GAUX,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,OACf,CAIAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,GAEhE,EAGAZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,GACvD,EAOArB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,EAAM,EAAEC,KAAK,KAAMD,IAC9I,OAAOF,CACR,EAGAzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,OAAG,EAClD,WAA8B,OAAOA,CAAQ,EAE9C,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,CACR,EAGAZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,EAAW,EAGpH/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,E,iCChFrD,qSACA,yBACA,cACA,+DAEA,IACA,6BAqDA,aACA,cACA,kCAEA,EADA,KACA,UA9BA,cACA,mBACA,iBACA,kCACA,oBACA,eACA,oBACA,gBACA,0BACA,GACA,MACA,SACA,uBAEA,OACA,gBACA,kBACA,aACA,OACA,GACA,EACA,sBACA,GACA,EASA,wBACA,cACA,2BACA,WACA,kBAEA,uBAlEA,mCAkEA,CACA,WACA,kBAEA,4BACA,WACA,kBACA,MACA,YAEA,cACA,SACA,GACA,GACA,EACA,MACA,WAKA,uBACA,iCACA,YACA,0BACA,kBACA,aACA,WACA,YACA,8BACA,GACA,EACA,6BACA,iBACA,GACA,G","file":"UploadPluginRouteTSCtrl.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { LoDashStatic } from 'lodash';\r\nimport { routeType } from './UploadPluginRouteTS';\r\nimport { IScopeUploadPlugin } from './UploadPluginRouteTSType';\r\n\r\nangular.module('arxivar.plugins.controller').controller('UploadPluginRouteTSCtrl', [\r\n\t'$scope', '$http', '$timeout', '_', 'arxivarResourceService', 'arxivarUserServiceCreator', 'arxivarRouteService', 'arxivarDocumentsService', 'arxivarNotifierService', 'UploadPluginRouteTS',\r\n\t($scope: IScopeUploadPlugin, $http: angular.IHttpService, $timeout: angular.ITimeoutService, _: LoDashStatic, arxivarResourceService: IArxivarResourceService, arxivarUserServiceCreator: IArxivarUserServiceCreator, arxivarRouteService: IArxivarRouteService, arxivarDocumentsService: IArxivarDocumentsService, arxivarNotifierService: IArxivarNotifierService, UploadPluginRouteTS: routeType) => {\r\n\r\n\t\t$scope.arrayBufferComplete = [];\r\n\t\t$scope.disabled = false;\r\n\t\t$scope.isThemeLight = document.body.classList.contains('theme-light');\r\n\t\t//IMPORTANT: INSERT AN EXISTING MASK ID BELOW\r\n\t\tconst maskID = 'eb69d6c75f56460b8756cef279c86551';\r\n\t\tconst inputFile = angular.element('#upload');\r\n\r\n\t\t//XMLHttpRequest call (disabled)\r\n\t\tconst _uploadXmlHttpRequest = (url: string, file: File): Promise<string> => {\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tconst http = new XMLHttpRequest();\r\n\t\t\thttp.open('POST', url, true);\r\n\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\thttp.onreadystatechange = () => {\r\n\t\t\t\t\tif (http.readyState === 4 && http.status === 200) {\r\n\t\t\t\t\t\tlet response = JSON.parse(http.response);\r\n\t\t\t\t\t\tresolve(response[0]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\t\t\t\tconst reader = new FileReader();\r\n\t\t\t\treader.onload = () => {\r\n\t\t\t\t\tconst arrayBuffer = reader.result as ArrayBuffer;\r\n\t\t\t\t\tconst array = new Uint8Array(arrayBuffer);\r\n\t\t\t\t\tlet myBlobPrev = new Blob([array]);\r\n\r\n\t\t\t\t\tformData.append('file', myBlobPrev, file.name);\r\n\r\n\t\t\t\t\thttp.send(formData);\r\n\t\t\t\t};\r\n\t\t\t\treader.readAsArrayBuffer(file);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//$http call (enabled)\r\n\t\tconst _upload$http = (url: string, file: File): Promise<string> => {\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\treader.onload = () => {\r\n\t\t\t\t\tconst arrayBuffer = reader.result as ArrayBuffer;\r\n\t\t\t\t\tconst array = new Uint8Array(arrayBuffer);\r\n\t\t\t\t\tconst myBlobPrev = new Blob([array]);\r\n\r\n\t\t\t\t\tformData.append('file', myBlobPrev, file.name);\r\n\r\n\t\t\t\t\t$http({\r\n\t\t\t\t\t\turl: url,\r\n\t\t\t\t\t\theaders: { 'Content-Type': undefined },\r\n\t\t\t\t\t\tdata: formData,\r\n\t\t\t\t\t\tmethod: 'POST'\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(({ data }: any) => {\r\n\r\n\t\t\t\t\t\t\tresolve(data[0]);\r\n\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t};\r\n\t\t\t\treader.readAsArrayBuffer(file);\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t// comment/decomment _uploadXmlHttpRequest/_upload$http below to change between $http or XMLHttpRequest call function \r\n\t\tconst handler = () => {\r\n\t\t\t$scope.disabled = true;\r\n\t\t\tconst url = arxivarResourceService.webApiUrl + 'buffer/insert';\r\n\t\t\tconst input = inputFile[0] as HTMLInputElement;\r\n\t\t\tconst file = input.files[0];\r\n\t\t\t//_uploadXmlHttpRequest(url, file)\r\n\t\t\t_upload$http(url, file)\r\n\t\t\t\t.then(bufferId => {\r\n\t\t\t\t\t$timeout(() => {\r\n\t\t\t\t\t\tconst url = arxivarRouteService.getURLProfilation({ bufferId: bufferId, fileName: file.name });\r\n\t\t\t\t\t\tconst maskUrl = arxivarRouteService.getMaskProfilation(maskID, { bufferId: bufferId, fileName: file.name });\r\n\t\t\t\t\t\t$scope.arrayBufferComplete.push({ bufferId: bufferId, bufferName: file.name, url, maskUrl });\r\n\t\t\t\t\t\t$scope.disabled = false;\r\n\t\t\t\t\t\tinputFile.val('');\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tinputFile.on({ change: handler });\r\n\r\n\t\t//$scope.upload = handler;\r\n\r\n\t\t$scope.download = (bufferId) => {\r\n\t\t\tarxivarResourceService.getByteArray('Buffer/file/' + bufferId, { openload: false, hideUserMessageError: false })\r\n\t\t\t\t.then(({ data, status, headers }) => {\r\n\t\t\t\t\treturn arxivarDocumentsService.downloadStream(data, status, headers);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\t$scope.$on('$destroy', () => {\r\n\t\t\tinputFile.off('change', handler);\r\n\t\t});\r\n\r\n\r\n\t}\r\n]);\r\n"],"sourceRoot":""}